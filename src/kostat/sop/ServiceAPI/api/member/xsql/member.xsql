<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">

	<!-- 회원 정보 조회 -->
	<select id="memberInfo" parameterType="hashmap" resultType="hashmap">
		SELECT	
				*
		FROM	srv_dt_memberinfo
		WHERE	member_id = #{member_id}
	</select>
	
	<!-- 회원 로그인 -->
	<select id="memberLoginInfo" parameterType="hashmap" resultType="hashmap">
		SELECT	member_id
		,			pw
		,			member_grade
		,			member_nm
		,			member_key
		,			last_access_ip
		,			TO_CHAR(last_access_dt, 'YYYY-MM-DD HH24:MI') as last_access_dt
		,			pw_fail_cnt
		,			login_limit_yn
		, 			cp_no
		, 			email
		FROM		srv_dt_memberinfo
		WHERE	member_id = #{member_id} and combine_login_yn != 'Y'
	</select>
	
	<!-- 실명인증 중복가입 여부 조회 -->
	<select id="getMemberOverlapCheck" parameterType="hashmap" resultType="int">
		SELECT	COUNT(*)
		FROM		srv_dt_memberinfo
		WHERE	member_key = #{member_key}
	</select>
	
	<!-- 실명인증 정보 조회 -->
	<select id="getNameInfoList" parameterType="hashmap" resultType="hashmap">	
		SELECT	real_nm_auth_person_key AS member_key
		,			nm
		,			birth
		,			gender
		,			native_foreign_div
		,			info_link_1
		,			info_link_2
		,			info_link_ver
		,			req_no
		,			auth_succ_yn
		,			auth_div
		,			cp_no
		,			telecom
		,			req_time
		,			add_param
		FROM    	srv_dt_authinfo
		WHERE   real_nm_auth_person_key = #{member_key}
	</select>
	
	<!-- 실명인증 정보 등록 -->
	<insert id="insertNameInfo" parameterType="hashmap">
		INSERT INTO srv_dt_authinfo
			(
					real_nm_auth_psn_key
				,	nm
				,	birth
				,	gender
				,	native_foreign_div
				,	info_link_1
				,	info_link_2
				,	info_link_ver
				,	req_no
				,	auth_succ_yn
				,	auth_div
				,	cp_no
				,	telecom
				,	req_time
				,	add_param
			)
		VALUES
			(
					#{member_key}
				,	#{nm}
				,	#{birth}
				,	#{gender}
				,	#{native_foreign_div}
				,	#{info_link_1}
				,	#{info_link_2}
				,	#{info_link_ver}
				,	#{req_no}
				,	#{auth_succ_yn}
				,	#{auth_div}
				,	#{cp_no}
				,	#{telecom}
				,	#{req_time}
				,	#{add_param}
			)
	</insert>
	
	<!-- 실명인증 정보 수정 -->
	<insert id="updateNameInfo" parameterType="hashmap">
		UPDATE	srv_dt_authinfo
		SET		nm = #{nm}
		,			birth = #{birth}
		,			gender = #{gender}
		,			native_foreign_div = #{native_foreign_div}
		,			info_link_1 = #{info_link_1}
		,			info_link_2 = #{info_link_2}
		,			info_link_ver = #{info_link_ver}
		,			req_no = #{req_no}
		,			auth_succ_yn = #{auth_succ_yn}
		,			auth_div = #{auth_div}
		,			cp_no = #{cp_no}
		,			telecom = #{telecom}
		,			req_time = #{req_time}
		,			add_param = #{add_param}
		WHERE	real_nm_auth_person_key = #{member_key}
	</insert>
	
	<!-- 아이디 찾기 2015-09-10 수정 -->
	<select id="getFindID" parameterType="hashmap" resultType="string">
		SELECT	member_id
		FROM	srv_dt_memberinfo
		WHERE	member_nm = #{member_nm}		
		AND		cp_no = #{cp_no}
		AND		combine_login_yn != 'Y'
	</select>
	
	<!-- 비밀번호 찾기 2015-09-10 수정 -->
	<select id="getFindPW" parameterType="hashmap" resultType="string">
		SELECT	member_key
		FROM		srv_dt_memberinfo
		WHERE	member_id = #{member_id}
		AND		member_nm = #{member_nm}
		AND		cp_no = #{cp_no}
		AND		combine_login_yn != 'Y'
	</select>
	
	<!-- 최종 접속시간 업데이트 -->
	<update id="updateLastConn" parameterType="hashmap">
		UPDATE	srv_dt_memberinfo
		SET		last_access_ip = #{last_access_ip}
		,			last_access_dt = SYSDATE
		WHERE	member_key = #{member_key}
	</update>
	
	<!-- 최종 로그아웃시간 업데이트 -->
	<update id="updateLastLogout" parameterType="hashmap">
		UPDATE	srv_dt_memberinfo
		SET		last_logout_dt = SYSDATE
		WHERE	member_key = #{member_key}
	</update>
	
	<!-- 로그인 실패횟수 수정 -->
	<update id="updatePwFailCnt" parameterType="hashmap">
		UPDATE	srv_dt_memberinfo
		SET		pw_fail_cnt = #{pw_fail_cnt}
		WHERE	member_key = #{member_key}
	</update>
	
	<!-- 비밀번호 변경 여부 (3개월) -->
	<select id="getPWChangeChk"  parameterType="hashmap" resultType="int">
		<![CDATA[
			SELECT	COUNT(*)
			FROM		srv_dt_memberinfo
			WHERE	member_key = #{member_key}
			AND		pw_last_mod_dt <= SYSDATE-93
		]]>
	</select>
	
	<!-- 회원정보 변경 -->
	<update id="memberInfoModify" parameterType="hashmap">
		UPDATE  srv_dt_memberinfo
		SET     pw = #{ch_pw}, 
				cp_no =#{ch_cp_no}, 
				email = #{email},
				pw_last_mod_dt = SYSDATE
		where member_id = #{member_id}
	</update>
	
	<!-- 회원정보 삭제 -->
	<delete id="memberDelete" parameterType="hashmap">
		DELETE
		FROM  srv_dt_memberinfo
		WHERE member_id = #{member_id}	
	</delete>
	
	<!-- 통계조회 히스토리 목록 조회-->
	<select id="StatistcsHistoryLists" parameterType="hashmap" resultType="hashmap">
	SELECT 
	*FROM(
	     SELECT * , ROWNUM AS RNUM, FLOOR((ROWNUM-1)/ 5+1) AS PAGE, COUNT(*) OVER() AS TOTCNT
	     FROM 
	         (SELECT *
	         FROM srv_dt_statsearchhist 
	         WHERE member_id= #{member_id} and hist_type='BMARK' order by reg_ts desc) A) B
	WHERE PAGE=#{page_size};			 	 								
	</select>
	<!-- 통계조회 히스토리 목록 전체 조회-->
	<select id="StatistcsHistoryAllLists" parameterType="hashmap" resultType="hashmap">
		SELECT 
			*
		FROM srv_dt_statsearchhist 
		WHERE member_id= #{member_id} and hist_type='BMARK' order by reg_ts desc
	</select>
	<!-- 통계조회 히스토리 목록 삭제-->
	<delete id="deleteStatistcsHistory" parameterType="hashmap">
		DELETE 
		FROM srv_dt_statsearchhist 
		WHERE member_id=#{member_id} and hist_type='BMARK' and hist_id=#{hist_id};		 	 								
	</delete>
	<!-- 해당 사용자에 대한 통계조회 히스토리 조회-->
	<select id="StatistcsHistoryListsForUser" parameterType="hashmap" resultType="hashmap">
		SELECT *
		FROM srv_dt_statsearchhist 
		WHERE member_id= #{member_id} and hist_type='BMARK'		 	 								
	</select>
	
	<!-- 통계조회 히스토리 목록 갯수 조회-->
	<select id="StatistcsHistoryListsCount" parameterType="hashmap" resultType="integer">	
		SELECT count(*)
		FROM srv_dt_statsearchhist where hist_type='BMARK' and member_id=#{member_id};									
	</select>
	
	<!-- 통계조회 히스토리목록정보 등록-->
	<insert id="insertStatistcsHistoryInfo" parameterType="hashmap">	
		INSERT INTO srv_dt_statsearchhist
			(
					hist_id
				,	member_id
				,	hist_type
				,   map_type
				,   hist_nm
				,   exp
				,   reg_ts
				
			)
		VALUES
			(
					#{hist_id}
				,	#{member_id}
				,	#{hist_type}
				,	#{map_type}
				,   #{hist_nm}
				,   #{exp}
				,   SYSDATE
			)							
	</insert>
	
	<!-- 통계조회 히스토리파라미터정보 등록-->
	<insert id="insertStatistcsHistoryParamInfo" parameterType="hashmap">	
		INSERT INTO srv_dt_stathistparaminfo
			(
					hist_id
				,	seq
				,	api_call_url
				,   param_info
				
			)
		VALUES
			(
					#{hist_id}
				,	#{seq}
				,	#{api_call_url}
				,   #{param_info}
				
			)							
	</insert>
	
	<!-- 통계히스토리 파라미터정보 조회 -->
	<select id="selectStatistcsHistoryParamInfo"  parameterType="hashmap" resultType="hashmap">
		SELECT	 	b.hist_id 
				 ,	b.hist_nm
				 ,	b.map_type
				 ,	b.hist_type
				 ,	a.seq
				 ,	a.api_call_url
				 ,	a.param_info
		FROM     	srv_dt_stathistparaminfo a, srv_dt_statsearchhist b
		WHERE	 	a.hist_id = b.hist_id AND a.hist_id = #{hist_id}
		ORDER BY seq asc;
	</select>
	
	<!-- 통계히스토리 파라미터정보 삭제 -->
	<delete id="deleteStatistcsHistoryParamInfo"  parameterType="hashmap">
		DELETE	 	
		FROM     	srv_dt_stathistparaminfo
		WHERE	 	hist_id = #{hist_id};
	</delete>
	<!-- 회원전화번호 변경  -->
	<select id="getCPNO" parameterType="hashmap" resultType="string">
		SELECT	member_key
		FROM		srv_dt_memberinfo
		WHERE	member_key = #{member_key}
		AND		member_id = #{member_id}		
		AND		cp_no = #{cp_no}
	</select>
	
	<!-- 비밀번호 수정 업데이트 -->
	<update id="passupdate" parameterType="hashmap">
		UPDATE	srv_dt_memberinfo
		SET		pw = #{pw}		
		WHERE	member_id = #{member_id}
	</update>
	<!-- 통합로그인 여부 업데이트 -->
	<update id="updateIntgrLoginInfo" parameterType="hashmap">
		UPDATE	srv_dt_memberinfo
		SET		use_yn = #{use_yn}		
		WHERE	member_id = #{sys_member_id} AND combine_login_yn != 'Y'
	</update>
	<!-- 통합로그인 기존사용자 중복여부 체크 -->
	<select id="getCheckMemberInfo" parameterType="hashmap" resultType="hashmap">
		SELECT	*
		FROM 	srv_dt_memberinfo
		WHERE	member_nm = #{member_nm}
		<!-- AND		birth = #{birth} 상용일때 풀자-->
		AND		gender = #{gender}
	</select>
	<!-- 통합로그인 사용자 중복여부 체크 -->
	<select id="getIntgrMemberCheckCnt" parameterType="hashmap" resultType="integer">
		SELECT	COUNT(*) 
		FROM 	srv_dt_memberinfo
		WHERE	member_id = #{member_id}
		AND		combine_login_yn = 'Y'
	</select>
	<!-- 통합회원정보 등록 -->
	<insert id="insertIntgrMemberInfo" parameterType="hashmap">
		INSERT INTO srv_dt_memberinfo
			(
				 	member_id
				, 	pw
				, 	member_nm
				, 	birth_code
				, 	gender
				, 	cp_no
				, 	email
				, 	member_grade
				,	pw_last_mod_dt
				, 	pw_fail_cnt
				,	last_access_ip
				,	last_access_dt
				,	member_key
				,	srv_agreement_agree_yn
				, 	psn_info_agreement_agree_yn
				,	other_people_provd_agree_yn
				<if test='parent_member_id != null'>
				,	parent_member_id
				,	fourteen_less_than_yn
				,	parent_agree_yn
				</if>
				,   combine_login_yn
				,   combine_member_no
				,   reg_ts
			)
		VALUES
			(
				 	#{member_id}
				, 	#{pw}
				, 	#{member_nm}
				, 	#{birth_code}
				, 	#{gender}
				, 	#{cp_no}
				, 	#{email}
				, 	'GM'
				,	#{pw_last_mod_dt}
				, 	#{pw_fail_cnt}
				,	#{last_access_ip}
				,	SYSDATE
				,	#{member_key}
				,	'Y'
				, 	'Y'
				, 	'Y'
				<if test='parent_member_id != null'>
				,	#{parent_member_id}
				,	'Y'
				,	'Y'
				</if>
				,	'Y'
				,   #{intgr_member_sn}
				,	#{reg_ts}
			)
	</insert>
	<!-- 통합회원정보 업데이트 -->
	<update id="updateIntgrMemberInfo" parameterType="hashmap">
		UPDATE	srv_dt_memberinfo
		SET		pw = #{pw}
		, 		cp_no = #{cp_no}
		,		email = #{email}
		,		pw_last_mod_dt = #{pw_last_mod_dt}
		,		pw_fail_cnt = #{pw_fail_cnt}
		, 		last_access_ip = #{last_access_ip}
		, 		last_access_dt = SYSDATE
		WHERE	member_id = #{member_id}
	</update>
	<!-- 통합회원 로그아웃 시간 업데이트  -->
	<update id="updateIntgrLastConn" parameterType="hashmap">
		UPDATE	srv_dt_memberinfo
		SET		last_access_ip = #{last_access_ip}
		,		last_logout_dt = SYSDATE
		WHERE	member_id = #{member_id}
	</update>
	<!-- 개발인증키 신청유무  -->
	<select id="selectAuthKeyListCnt" parameterType="hashmap" resultType="integer">
		SELECT	COUNT(*)
		FROM	srv_dt_usesrvinfo
		WHERE	member_id = #{member_id}
	</select>
	
	<!-- 통계히스토리 회원아이디 변경  2015-09-10 수정 -->
	<update id="updateHistChangeMemberId" parameterType="hashmap">
		UPDATE	srv_dt_statsearchhist
		SET		member_id = #{member_id}
		WHERE	member_id = #{sys_member_id}
	</update>
	
	<!-- 개발자 인증키 회원아이디 변경 2015-09-10 수정 -->
	<update id="updateSrvChagneMemberId" parameterType="hashmap">
		UPDATE	srv_dt_usesrvinfo
		SET		member_id = #{member_id}
		WHERE	member_id = #{sys_member_id}
	</update>
	<!-- 기존회원찾기 -->
	<select id="selectOriginMember" parameterType="hashmap" resultType="hashmap">
		SELECT 	NVL(TO_CHAR(reg_ts, 'YYYY-MM-DD'), TO_CHAR(SYSDATE, 'YYYY-MM-DD')) as reg_ts,
				PW
		FROM		srv_dt_memberinfo
		WHERE	member_id = #{member_id} and member_nm = #{member_nm}
	</select>
	
	<!-- 게시판 정보 삭제 -->
	<delete id="deleteBoardInfo" parameterType="hashmap">
		DELETE
		FROM		SRV_DT_BOARD
		WHERE	reg_member_id = #{member_id}
	</delete>
	
	<!-- 게시판 댓글 정보 삭제 2015-09-10 수정 -->
	<delete id="deleteBoardReplyInfo" parameterType="hashmap">
		DELETE
		FROM		SRV_DT_BOARDREPLY
		WHERE	reg_member_id = #{member_id}
	</delete>
	
	<!-- API 사용 서비스 정보 삭제 2015-09-10 수정 -->
	<delete id="deleteUserServiceInfo" parameterType="hashmap">
		DELETE
		FROM		SRV_DT_USESRVINFO
		WHERE	member_id = #{member_id}
	</delete>
	
	<!-- 게시판 회원아이디 변경 2015-09-10 수정 -->
	<update id="updateBoardChagneMemberId" parameterType="hashmap">
		UPDATE	SRV_DT_BOARD
		SET		reg_member_id = #{member_id}
		WHERE	reg_member_id = #{sys_member_id}
	</update>
	
	<!-- 게시판 댓글 회원아이디 변경 2015-09-10 수정 -->
	<update id="updateBoardReplyChagneMemberId" parameterType="hashmap">
		UPDATE	SRV_DT_BOARDREPLY
		SET		reg_member_id = #{member_id}
		WHERE	reg_member_id = #{sys_member_id}
	</update>
	
</mapper>