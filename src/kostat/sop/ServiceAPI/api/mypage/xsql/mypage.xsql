<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mypage">

	<insert id="insertMyData" parameterType="hashmap">
	
	INSERT INTO SRV_DT_USER_DATA_UPLOAD_MAIN
			(
					data_id
				,	usr_id
				,	usr_nm
				,	share_yn
				,	use_history
				,	data_title
				,	file_path
				,	file_nm_real
				,	file_nm_logic
				,	file_sz
				,	share_grant_manager_id
				,	upload_dt
				,	start_dt
				,	end_dt
				,	map_disp_type
				
			)
		VALUES
			(
					#{data_id}
				,	#{usr_id}
				,	#{member_nm}
				,	#{share_yn}
				,	#{use_history}
				,	#{data_title}
				,	#{file_path}
				,	#{file_nm_real}
				,	#{file_nm_logic}
				,	#{file_sz}
				,	#{share_grant_manager_id}
				,	to_date(#{upload_dt},'YYYY-MM-DD hh24:mi:ss','NLS_DATE_LANGUAGE = American')
				,	to_date(#{start_dt},'YYYY-MM-DD hh24:mi:ss','NLS_DATE_LANGUAGE = American')
				,	to_date(#{end_dt},'YYYY-MM-DD hh24:mi:ss','NLS_DATE_LANGUAGE = American')
				,	#{map_disp_type}
			)
			
	</insert>
	
	<insert id="insertUserData" parameterType="hashmap">
		Insert INTO SRV_DT_USER_UPLOAD_DATA(
			usr_data_id
			,SEQ
			,usr_data
			,adm_cd
			,adm_nm
			,tot_reg_cd
			,spacial_attr
		)
		VALUES(
			#{usr_data_id}
			,#{SEQ}
			,#{usr_data}
			,#{adm_cd}
			,#{adm_nm}
			,#{tot_reg_cd}
			,SDO_GEOMETRY(
				2001,
				NULL,
				SDO_POINT_TYPE(#{geo_x},#{geo_y}, NULL),
				NULL,
				NULL)
		)
	</insert>
	
	<insert id="insertUserMetaData" parameterType="hashmap">
		Insert INTO SRV_DT_USER_META_DATA(
			data_id
			,col_id
			,col_nm
			,CHECK_TYPE
		)VALUES(
			#{data_id}
			,#{col_id}
			,#{col_nm}
			,#{CHECK_TYPE}
		)
	</insert>
	
	<insert id="insertNewMainData" parameterType="hashmap">
		INSERT INTO SRV_DT_USER_DATA_UPLOAD_MAIN
			(
					data_id
				,	usr_id
				,	usr_nm
				,	share_yn
				,	use_history
				,	data_title
				,	share_grant_manager_id
				,	upload_dt
				,	start_dt
				,	end_dt
				,	map_disp_type
				,	file_nm_real
				,	tot_type
				,	gioField
				/* 2017.08.01 [개발팀] 수정 GROUP_COL_LIST 추가*/
				<if test='yearList !="" and yearList != null'>
					, GROUP_COL_LIST
				</if>
				
			)
		VALUES
			(
					#{data_id}
				,	#{usr_id}
				,	#{member_nm}
				,	#{share_yn}
				,	#{use_history}
				,	#{data_title}
				,	#{share_grant_manager_id}
				,	to_date(#{upload_dt},'YYYY-MM-DD hh24:mi:ss','NLS_DATE_LANGUAGE = American')
				,	to_date(#{start_dt},'YYYY-MM-DD hh24:mi:ss','NLS_DATE_LANGUAGE = American')
				,	to_date(#{end_dt},'YYYY-MM-DD hh24:mi:ss','NLS_DATE_LANGUAGE = American')
				,	#{map_disp_type}
				,	#{file_nm_real}
				,	#{tot_type}
				,	#{gioField}
				/* 2017.08.01 [개발팀] 수정 GROUP_COL_LIST 추가*/
				<if test='yearList !="" and yearList != null'>
					,#{yearList}
				</if>
			)
	</insert>
	
	<insert id="insertNewUsrData" parameterType="hashmap">
		Insert INTO SRV_DT_USER_UPLOAD_DATA(
			usr_data_id
			,SEQ
			,usr_data
			,adm_cd
			,tot_reg_cd
			,spacial_attr
			
		)
		VALUES(
			#{usr_data_id}
			,#{SEQ}
			,#{usr_data}
			,#{ADM_CD}
			,#{TOT_REG_CD}
			,SDO_GEOMETRY(
				2001,
				NULL,
				SDO_POINT_TYPE(#{geo_x},#{geo_y}, NULL),
				NULL,
				NULL)
			
		)
	</insert>
	
	<insert id="insertNewMetaData" parameterType="hashmap">
		Insert INTO SRV_DT_USER_META_DATA(
			data_id
			,col_id
			,col_nm
			,CHECK_TYPE
		)VALUES(
			#{data_id}
			,#{col_id}
			,#{col_nm}
			,#{CHECK_TYPE}
		)
	</insert>
	
	<update id="updateMainData" parameterType="hashmap">
		update SRV_DT_USER_DATA_UPLOAD_MAIN 
		set data_title = #{subject}
			,share_yn = #{share_yn}
			,use_history = #{use_history}
			,map_disp_type=#{map_disp_type}
			<if test ='gioField !=null'>
				,gioField = #{gioField}
			</if>
			/* 2017.08.01 [개발팀] 수정 */
			<if test='yearList !="" and yearList != null'>
				,GROUP_COL_LIST = #{yearList}
			</if>
			 
			where data_id = #{data_id}
	</update>
	<update id="updateUploadData" parameterType="hashmap">
		update SRV_DT_USER_UPLOAD_DATA set usr_data = #{usr_data} where usr_data_id = #{data_uid} and SEQ = #{SEQ}
	</update>
	<update id="updateUploadGeoData" parameterType="hashmap">
		merge into SRV_DT_USER_UPLOAD_DATA a 
			using dual 
				ON( 
					a.usr_data_id = #{data_uid} and  
					a.SEQ = #{SEQ} 
				) 
				WHEN matched then 
				update set  
				usr_data = #{usr_data}
				,spacial_attr = SDO_GEOMETRY(2001,NULL,SDO_POINT_TYPE(#{geo_x},#{geo_y}, NULL),NULL,NULL) 
				,adm_cd = #{adm_cd}
				,adm_nm = #{adm_nm}
				,tot_reg_cd = #{tot_reg_cd} 
				where usr_data_id = #{data_uid} and SEQ = #{SEQ} 	
				WHEN NOT matched then 
				Insert(
					usr_data_id
					,SEQ
					,usr_data
					,adm_cd
					,adm_nm
					,tot_reg_cd
					,spacial_attr
					)
				VALUES(
						#{data_uid}
						,#{SEQ}
						,#{usr_data}
						,#{adm_cd}
						,#{adm_nm}
						,#{tot_reg_cd}
						,SDO_GEOMETRY(2001,NULL,SDO_POINT_TYPE(#{geo_x},#{geo_y}, NULL),NULL,NULL)
				)
	</update>
	
	<delete id="deleteUploadGeoData" parameterType="hashmap">
	delete SRV_DT_USER_UPLOAD_DATA where usr_data_id = #{data_uid} and SEQ = #{SEQ}
	</delete>
	<update id="updateMetaData" parameterType="hashmap">
		merge into SRV_DT_USER_META_DATA a
			using dual 
				ON( 
					a.data_id= #{data_id} and
					a.col_id = #{col_id} 
					) 
			WHEN matched then 
				update set  
					col_nm = #{col_nm},  
					check_type=#{CHECK_TYPE}
					where data_id = #{data_id} and col_id = #{col_id}  
			WHEN NOT matched then 
				Insert (data_id,col_id,col_nm,check_type)   
				VALUES(#{data_id},#{col_id},#{col_nm},#{CHECK_TYPE}) 
	</update>
	
	<update id="updateMyKmlData">
		update SRV_DT_USER_DATA_UPLOAD_MAIN set data_title = #{subject},share_yn = #{share_yn},use_history = #{use_history} where data_id = #{data_id}
	</update>
	<select id="selectCountMyUploaqdData" parameterType="string" resultType="Integer">
		select count(*) from SRV_DT_USER_UPLOAD_DATA where usr_data_id = #{data_id}
	</select>
	
	<select id="selectMyDataListCount" parameterType="string" resultType="Integer">
		select count(data_id) from SRV_DT_USER_DATA_UPLOAD_MAIN where usr_id=#{value}
	</select>
	<update id="updateMyDataTotalSize" parameterType="hashmap">
		update SRV_DT_USER_UPLOAD_STATUS SET acc_tot_sz = #{total_size} where usr_id = #{usr_id}
	</update>
	<insert id="insertMyDataTotalSize" parameterType="hashmap">
		insert into SRV_DT_USER_UPLOAD_STATUS (usr_id,acc_tot_sz,usr_nm)VALUES(#{usr_id},#{total_size},#{member_nm})
	</insert>
	
	<select id="selectMyDataTotalSize" parameterType="string" resultType="Integer">
		select NVL(sum(acc_tot_sz),-1) from SRV_DT_USER_UPLOAD_STATUS where usr_id = #{value}
	</select>
	
	<!-- 나의 데이터 리스트 -->
	<select id="myDataList" parameterType="hashmap" resultType="hashmap">
		select * from(
			select 			
				data_id,
				usr_id,
				share_yn,
				use_history,
				data_title,
				map_disp_type,
				share_grant_manager_id,
				TO_CHAR(upload_dt, 'YYYY"-"MM"-"DD hh24":"mi')as upload_dt,
				ROWNUM as rnum
			
				from
				(
					select * from SRV_DT_USER_DATA_UPLOAD_MAIN
						where usr_id = #{usr_id}
						order By upload_dt desc
				) where ROWNUM <![CDATA[ <= ]]> #{endRow}
			) where rnum <![CDATA[ >= ]]> #{startRow}
	</select>
	<!-- 나의 데이터 리스트 -->
	<select id="myDataPureList" parameterType="hashmap" resultType="hashmap">
		SELECT
			data_id,
			usr_id,
			share_yn,
			use_history,
			data_title,
			share_grant_manager_id,
			TO_CHAR(upload_dt, 'YYYY.MM.DD') as "upload_dt"
		FROM SRV_DT_USER_DATA_UPLOAD_MAIN
		WHERE USR_ID = #{usr_id}
		ORDER BY UPLOAD_DT DESC
	</select>
	
	<!-- 나의 데이터 총 개수 -->
	<select id="myDataTotalCount" parameterType="hashmap" resultType="int">
		SELECT 	COUNT(*) as cnt 
		FROM 	SRV_DT_USER_DATA_UPLOAD_MAIN
		WHERE 	usr_id = #{usr_id}
	</select>
	
	<!-- 공유 데이터 리스트 -->
	<select id= "sharedDataList" parameterType="hashmap" resultType="hashmap">
		select * from(
			select 			
				data_id,
				usr_id,
				share_yn,
				use_history,
				data_title,
				map_disp_type,
				share_grant_manager_id,
				TO_CHAR(upload_dt, 'YYYY"-"MM"-"DD hh24":"mi')as upload_dt,
				ROWNUM as rnum
			
				from
				(
					select * from SRV_DT_USER_DATA_UPLOAD_MAIN
						where share_yn = 'Y'
						order By upload_dt desc
				) where ROWNUM <![CDATA[ <= ]]> #{endRow}
			) where rnum <![CDATA[ >= ]]> #{startRow}
	</select>
	
	<!-- 공유 데이터 총 개수 -->
	<select id="sharedDataTotalCount" parameterType="hashmap" resultType="int">
		SELECT 	COUNT(*) as cnt 
		FROM 	SRV_DT_USER_DATA_UPLOAD_MAIN
		WHERE 	share_yn = 'Y'
	</select>
	
	<select id="selectMyDataList" parameterType="hashmap" resultType="hashMap">
		select * from(
			select 			
				data_id,
				usr_id,
				share_yn,
				use_history,
				data_title,
				file_path,
				file_nm_real,
				file_nm_logic,
				file_sz,
				share_grant_manager_id,
				map_disp_type, <!-- 2017.10.19 [개바팀] 칼럼추가 -->
				TO_CHAR(grant_dt, 'yyyy-MM-dd HH24:mi:ss') as grant_dt,
				TO_CHAR(upload_dt, 'YYYY"년" MM"월" DD"일"')as upload_dt,
				TO_CHAR(start_dt, 'yyyy-MM-dd HH24:mi:ss')as start_dt,
				TO_CHAR(end_dt, 'yyyy-MM-dd HH24:mi:ss') as end_dt, 
				ROWNUM as rnum
			
				from
				(
					select * from SRV_DT_USER_DATA_UPLOAD_MAIN
						where usr_id = #{usr_id}
						order By upload_dt desc
				) where ROWNUM <![CDATA[ <= ]]> #{endRow}
			) where rnum <![CDATA[ >= ]]> #{startRow}
			
	</select>
	<select id="selectMyDataInfo" parameterType="string" resultType="hashmap">
		select 
			data_id,
			usr_id,
			share_yn,
			use_history,
			data_title,
			map_disp_type,
			TO_CHAR(upload_dt,'yyyy-MM-dd HH24:mi:ss') as upload_dt,
			TO_CHAR(start_dt,'yyyy-MM-dd HH24:mi:ss') as start_dt,
			TO_CHAR(end_dt,'yyyy-MM-dd HH24:mi:ss') as end_dt,
			file_path,
			file_nm_real,
			file_nm_logic,
			file_sz,
			share_grant_manager_id,
			TO_CHAR(grant_dt,'yyyy-MM-dd HH24:mi:ss')	as grant_dt,
			NVL(tot_type,0) as tot_type,
			gioField,
			/* 2017.08.01 [개발팀] 수정 */
			group_col_list

			from SRV_DT_USER_DATA_UPLOAD_MAIN
			
			where data_id = #{value}			
	</select>
	
	<select id="selectUserUploadData" parameterType="string" resultType="hashMap">
		select 
			usr_data_id,
			seq,
			RTRIM(LTRIM(adm_cd)) as adm_cd,
			adm_nm,
			tot_reg_cd,
			usr_data,
			t.spacial_attr.SDO_POINT.X as geo_x,
			t.spacial_attr.SDO_POINT.y as geo_y
				

			from SRV_DT_USER_UPLOAD_DATA t 
			
			where usr_data_id = #{value}			
	</select>
	
	<select id="selectUserMetaData" parameterType="string" resultType="hashMap">
		select 
			data_id,
			col_id,
			col_nm,
			check_type
			from SRV_DT_USER_META_DATA 
			where data_id = #{value}	order by col_id asc
	</select>
	
	<delete id="deleteMain" parameterType="string">
		delete SRV_DT_USER_DATA_UPLOAD_MAIN where DATA_ID = #{value}
	</delete>
	
	<delete id="deleteMataData" parameterType="string">
		delete SRV_DT_USER_META_DATA where DATA_ID = #{value}
	</delete>
	
	<delete id="userDataDelete" parameterType="string">
		delete SRV_DT_USER_UPLOAD_DATA where usr_data_id = #{value}
	</delete>
	
	<delete id="deleteColId" parameterType="hashMap">
		delete SRV_DT_USER_META_DATA where DATA_ID = #{data_id} and COL_ID = #{col_id}
	</delete>
	
	<!-- 활용사례 목록 조회 (5개) -->
	<select id="MainUploadLists" parameterType="string" resultType="hashmap">
		SELECT * FROM(
			SELECT ROWNUM AS rnum, DATA_ID, USR_ID, SHARE_YN, DATA_TITLE, to_char(UPLOAD_DT,'yyyy-mm-dd') as UPLOAD_DT, START_DT, END_DT, FILE_PATH, FILE_NM_REAL, FILE_NM_LOGIC, FILE_SZ, MAP_DISP_TYPE, SHARE_GRANT_MANAGER_ID, GRANT_DT
			FROM SRV_DT_USER_DATA_UPLOAD_MAIN WHERE USE_HISTORY ='Y' order by START_DT desc 
		) WHERE ROWNUM <![CDATA[ <= ]]> #{last_num}
	</select>
	
</mapper>